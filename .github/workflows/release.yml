name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

jobs:
  release:
    permissions: 
      contents: write
    runs-on: ubuntu-latest
    
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Extract version from tag
      id: extract_version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "Tag version: $TAG_VERSION"
        
    - name: Extract version from package.json
      id: package_version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $PACKAGE_VERSION"
        
    - name: Compare versions
      run: |
        if [ "${{ steps.extract_version.outputs.tag_version }}" != "${{ steps.package_version.outputs.package_version }}" ]; then
          echo "❌ Version mismatch!"
          echo "Tag version: ${{ steps.extract_version.outputs.tag_version }}"
          echo "Package.json version: ${{ steps.package_version.outputs.package_version }}"
          echo "Please ensure the tag version matches the version in package.json"
          exit 1
        fi
        echo "✅ Version check passed: ${{ steps.extract_version.outputs.tag_version }}"
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run check-types
      
    - name: Compile extension
      run: npm run compile
      
    - name: Build production package
      run: npm run package
      
    - name: Compile tests
      run: npm run compile-tests
      
    - name: Run tests
      uses: coactions/setup-xvfb@b6b4fcfb9f5a895edadc3bc76318fae0ac17c8b3 # v1.0.1
      with:
        run: npm test
        options: -screen 0 1024x768x24
      continue-on-error: false  # Fail the release if tests fail
      
    - name: Create VSIX package
      run: npx vsce package
      
    - name: Get VSIX filename
      id: vsix_filename
      run: |
        VSIX_FILE=$(ls *.vsix | head -n 1)
        echo "vsix_file=$VSIX_FILE" >> $GITHUB_OUTPUT
        echo "VSIX file: $VSIX_FILE"
        
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract the latest changes from CHANGELOG.md if it has been updated
        # If not, create basic release notes
        if grep -q "## \[.*\]" CHANGELOG.md; then
          # Try to extract the latest version section from changelog
          NOTES=$(sed -n '/## \[.*\]/,/## \[.*\]/p' CHANGELOG.md | head -n -1 | tail -n +2)
          if [ -n "$NOTES" ]; then
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "$NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "notes=Release ${{ steps.extract_version.outputs.tag_version }}" >> $GITHUB_OUTPUT
          fi
        else
          echo "notes=Release ${{ steps.extract_version.outputs.tag_version }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release with notes and upload VSIX file
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ steps.extract_version.outputs.tag_version }}" \
          --notes "${{ steps.release_notes.outputs.notes }}" \
          ./${{ steps.vsix_filename.outputs.vsix_file }}
        
    - name: Release Summary
      run: |
        echo "🎉 Release ${{ steps.extract_version.outputs.tag_version }} created successfully!"
        echo "📦 VSIX package: ${{ steps.vsix_filename.outputs.vsix_file }}"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
